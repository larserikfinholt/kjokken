{
  "name": "envconf",
  "author": {
    "name": "Microsoft Corporation"
  },
  "contributors": [
    {
      "name": "Block, Glenn",
      "email": "gblock@microsoft.com"
    },
    {
      "name": "Rodrigues, Andre",
      "email": "andrerod@microsoft.com"
    },
    {
      "name": "Tavares, Chris",
      "email": "ctavares@microsoft.com"
    }
  ],
  "version": "0.0.1",
  "description": "a module for express-style programmatic configuration",
  "main": "lib/index.js",
  "tags": [
    "config",
    "environment"
  ],
  "keywords": [
    "config",
    "configuration",
    "environment"
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "devDependencies": {
    "mocha": "~1.9.0",
    "should": "~1.2.2",
    "sinon": "*",
    "jshint": "*"
  },
  "homepage": "https://github.com/WindowsAzure/envconf",
  "repository": {
    "type": "git",
    "url": "git@github.com:WindowsAzure/envconf.git"
  },
  "bugs": {
    "url": "http://github.com/WindowsAzure/envconf/issues"
  },
  "scripts": {
    "test": "npm -s run-script jshint && npm -s run-script unit",
    "unit": "mocha -R spec",
    "jshint": "jshint lib"
  },
  "readme": "envconf\r\n===========\r\n\r\nThis module makes it easy to use express-style configuration for any application.\r\nIt allows your users to define separate configuration environments in code\r\nand switch between sets of configuration via a single environment variable.\r\n\r\n\r\nUsage:\r\n\r\n```javascript\r\n\r\nvar envconf = require('envconf');\r\n\r\nvar c = envconf.createConfig();\r\n\r\nc.configure('development', function (c) {\r\n  c.set('settingOne', 'devValue');\r\n});\r\n\r\nc.configure('production', function (c) {\r\n  c.set('settingTwo', 'prodValue');\r\n});\r\n\r\nc('development').get('settingOne').should.equal('devValue');\r\n\r\nprocess.env.NODE_ENV = 'production';\r\nc.default.get('settingTwo').should.equal('prodValue');\r\n```\r\n\r\nThe previous code shows picking up the default environment from the NODE_ENV environment variable.\r\n\r\nYou can however configure your own environment variables as shown below.\r\n\r\n```javascript\r\n\r\nvar c2 = envconf.createConfig({ defaultEnvVar: 'MY_LIBRARY_VAR'});\r\n\r\nc2.configure('development', function (c) {\r\n  c.set('settingOne', 'devValue');\r\n});\r\n\r\nc2.configure('production', function (c) {\r\n  c.set('settingTwo', 'prodValue');\r\n});\r\n\r\nc2('development').get('settingOne').should.equal('devValue');\r\n\r\nprocess.env.MY_LIBRARY_VAR = 'production';\r\nc.default.get('settingTwo').should.equal('prodValue');\r\n```\r\n\r\nDo you want to add helper methods for your specific configuration? It's easy\r\nwith a config customizer:\r\n\r\n```javascript\r\n\r\nfunction addConfigHelpers(config) {\r\n  config.useSql = function (host, db) {\r\n    config.set('sql host', host);\r\n    config.set('sql database name', db);\r\n  }\r\n}\r\n\r\nvar c3 = envconf.createConfig( { customizer: addConfigHelpers });\r\n\r\nc3.configure('test', function (c) {\r\n  c.useSql('testmachine', 'testdb');\r\n});\r\n\r\nc3.configure('production', function (c) {\r\n  c.useSql('realDatabase', 'actualDb');\r\n});\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "envconf@0.0.1",
  "dist": {
    "shasum": "4c16b73c87d5d8fd5ab15be7dab55658e06ed996"
  },
  "_from": "envconf@>= 0.0.1",
  "_resolved": "https://registry.npmjs.org/envconf/-/envconf-0.0.1.tgz"
}